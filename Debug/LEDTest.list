
LEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800439c  0800439c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043a4  080043a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  080043b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080043b8  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a24  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240c  00000000  00000000  00031aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00033eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d56  00000000  00000000  00034fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205b7  00000000  00000000  00035d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001362b  00000000  00000000  000562bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ee7  00000000  00000000  000698e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004808  00000000  00000000  001317d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00135fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800433c 	.word	0x0800433c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800433c 	.word	0x0800433c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fbcd 	bl	8000c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81e 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9b6 	bl	8000844 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f996 	bl	8000808 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f964 	bl	80007a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e0:	f000 f878 	bl	80005d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80004e4:	f000 f8b4 	bl	8000650 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2108      	movs	r1, #8
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x3c>)
 80004ee:	f001 f815 	bl	800151c <HAL_GPIO_WritePin>
	TIM1->CCR1 = 80;
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <main+0x40>)
 80004f4:	2250      	movs	r2, #80	; 0x50
 80004f6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x44>)
 80004fc:	f002 fb26 	bl	8002b4c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x38>
 8000502:	bf00      	nop
 8000504:	48000400 	.word	0x48000400
 8000508:	40012c00 	.word	0x40012c00
 800050c:	2000008c 	.word	0x2000008c

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	; 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f003 fedf 	bl	80042e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f001 f827 	bl	8001588 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f9ca 	bl	80008d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000544:	f001 f802 	bl	800154c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <SystemClock_Config+0xc0>)
 800054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <SystemClock_Config+0xc0>)
 8000550:	f023 0318 	bic.w	r3, r3, #24
 8000554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000558:	2314      	movs	r3, #20
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000578:	2310      	movs	r3, #16
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f851 	bl	8001634 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000598:	f000 f99e 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fc51 	bl	8001e5c <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005c0:	f000 f98a 	bl	80008d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005c4:	f002 f864 	bl	8002690 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_SPI1_Init+0x74>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <MX_SPI1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_SPI1_Init+0x74>)
 80005e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_SPI1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_SPI1_Init+0x74>)
 80005ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_SPI1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_SPI1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI1_Init+0x74>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_SPI1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_SPI1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI1_Init+0x74>)
 8000622:	2207      	movs	r2, #7
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_SPI1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI1_Init+0x74>)
 800062e:	2208      	movs	r2, #8
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_SPI1_Init+0x74>)
 8000634:	f002 f92e 	bl	8002894 <HAL_SPI_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 f94b 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	40013000 	.word	0x40013000

08000650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09a      	sub	sp, #104	; 0x68
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	222c      	movs	r2, #44	; 0x2c
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fe29 	bl	80042e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000690:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <MX_TIM1_Init+0x150>)
 8000692:	4a44      	ldr	r2, [pc, #272]	; (80007a4 <MX_TIM1_Init+0x154>)
 8000694:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000696:	4b42      	ldr	r3, [pc, #264]	; (80007a0 <MX_TIM1_Init+0x150>)
 8000698:	221f      	movs	r2, #31
 800069a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <MX_TIM1_Init+0x150>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006a2:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <MX_TIM1_Init+0x150>)
 80006a4:	2263      	movs	r2, #99	; 0x63
 80006a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <MX_TIM1_Init+0x150>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ae:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <MX_TIM1_Init+0x150>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <MX_TIM1_Init+0x150>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ba:	4839      	ldr	r0, [pc, #228]	; (80007a0 <MX_TIM1_Init+0x150>)
 80006bc:	f002 f98d 	bl	80029da <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006c6:	f000 f907 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006d4:	4619      	mov	r1, r3
 80006d6:	4832      	ldr	r0, [pc, #200]	; (80007a0 <MX_TIM1_Init+0x150>)
 80006d8:	f002 fc2a 	bl	8002f30 <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006e2:	f000 f8f9 	bl	80008d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e6:	482e      	ldr	r0, [pc, #184]	; (80007a0 <MX_TIM1_Init+0x150>)
 80006e8:	f002 f9ce 	bl	8002a88 <HAL_TIM_PWM_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006f2:	f000 f8f1 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000702:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000706:	4619      	mov	r1, r3
 8000708:	4825      	ldr	r0, [pc, #148]	; (80007a0 <MX_TIM1_Init+0x150>)
 800070a:	f003 f87d 	bl	8003808 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000714:	f000 f8e0 	bl	80008d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	4818      	ldr	r0, [pc, #96]	; (80007a0 <MX_TIM1_Init+0x150>)
 800073e:	f002 fae3 	bl	8002d08 <HAL_TIM_PWM_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000748:	f000 f8c6 	bl	80008d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800076e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4807      	ldr	r0, [pc, #28]	; (80007a0 <MX_TIM1_Init+0x150>)
 8000782:	f003 f8a7 	bl	80038d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800078c:	f000 f8a4 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <MX_TIM1_Init+0x150>)
 8000792:	f000 f959 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 8000796:	bf00      	nop
 8000798:	3768      	adds	r7, #104	; 0x68
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MX_USART2_UART_Init+0x5c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ec:	f003 f8ea 	bl	80039c4 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 f86f 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000120 	.word	0x20000120
 8000804:	40004400 	.word	0x40004400

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_DMA_Init+0x38>)
 8000810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <MX_DMA_Init+0x38>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6493      	str	r3, [r2, #72]	; 0x48
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_DMA_Init+0x38>)
 800081c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	200c      	movs	r0, #12
 800082c:	f000 fb6d 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000830:	200c      	movs	r0, #12
 8000832:	f000 fb86 	bl	8000f42 <HAL_NVIC_EnableIRQ>

}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_GPIO_Init+0x8c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_GPIO_Init+0x8c>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_GPIO_Init+0x8c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_GPIO_Init+0x8c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <MX_GPIO_Init+0x8c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_GPIO_Init+0x8c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_GPIO_Init+0x8c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <MX_GPIO_Init+0x8c>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_GPIO_Init+0x8c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2108      	movs	r1, #8
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_GPIO_Init+0x90>)
 80008a8:	f000 fe38 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008ac:	2308      	movs	r3, #8
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0x90>)
 80008c4:	f000 fcc0 	bl	8001248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_SPI_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d128      	bne.n	80009a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_SPI_MspInit+0x80>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_SPI_MspInit+0x80>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_SPI_MspInit+0x80>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800097e:	2382      	movs	r3, #130	; 0x82
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098e:	2305      	movs	r3, #5
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fc54 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40013000 	.word	0x40013000
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_TIM_Base_MspInit+0x88>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d136      	bne.n	8000a30 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <HAL_TIM_Base_MspInit+0x8c>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <HAL_TIM_Base_MspInit+0x8c>)
 80009c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009cc:	6613      	str	r3, [r2, #96]	; 0x60
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_TIM_Base_MspInit+0x8c>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_TIM_Base_MspInit+0x94>)
 80009de:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 80009e8:	2210      	movs	r2, #16
 80009ea:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 80009fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a06:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 8000a16:	f000 faaf 	bl	8000f78 <HAL_DMA_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000a20:	f7ff ff5a 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <HAL_TIM_Base_MspInit+0x90>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	200000d8 	.word	0x200000d8
 8000a44:	4002001c 	.word	0x4002001c

08000a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <HAL_TIM_MspPostInit+0x68>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d11d      	bne.n	8000aa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_TIM_MspPostInit+0x6c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_TIM_MspPostInit+0x6c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_TIM_MspPostInit+0x6c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fbd1 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40012c00 	.word	0x40012c00
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09e      	sub	sp, #120	; 0x78
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2254      	movs	r2, #84	; 0x54
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fc02 	bl	80042e2 <memset>
  if(huart->Instance==USART2)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <HAL_UART_MspInit+0xcc>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d148      	bne.n	8000b7a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fbd5 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b00:	f7ff feea 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b04:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_UART_MspInit+0xd0>)
 8000b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_UART_MspInit+0xd0>)
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_UART_MspInit+0xd0>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0xd0>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0xd0>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0xd0>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b34:	2304      	movs	r3, #4
 8000b36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b44:	2307      	movs	r3, #7
 8000b46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f000 fb79 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 fb67 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3778      	adds	r7, #120	; 0x78
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40004400 	.word	0x40004400
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f89c 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <DMA1_Channel2_IRQHandler+0x10>)
 8000be6:	f000 fa7f 	bl	80010e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000d8 	.word	0x200000d8

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 fb55 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fc3d 	bl	80004c8 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	080043ac 	.word	0x080043ac
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	200001ac 	.word	0x200001ac

08000c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_IRQHandler>

08000c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f93d 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f80e 	bl	8000c9c <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e001      	b.n	8000c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c8c:	f7ff fe2a 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_InitTick+0x6c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d023      	beq.n	8000cf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_InitTick+0x70>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_InitTick+0x6c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f949 	bl	8000f5e <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10f      	bne.n	8000cf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d809      	bhi.n	8000cec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f913 	bl	8000f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_InitTick+0x74>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e007      	b.n	8000cfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e004      	b.n	8000cfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e001      	b.n	8000cfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	200001a8 	.word	0x200001a8

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200001a8 	.word	0x200001a8

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff3e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff31 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e098      	b.n	80010bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_DMA_Init+0x150>)
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d80f      	bhi.n	8000fb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <HAL_DMA_Init+0x154>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <HAL_DMA_Init+0x158>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	009a      	lsls	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_DMA_Init+0x15c>)
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb4:	e00e      	b.n	8000fd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_DMA_Init+0x160>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <HAL_DMA_Init+0x158>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	009a      	lsls	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a42      	ldr	r2, [pc, #264]	; (80010dc <HAL_DMA_Init+0x164>)
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800102e:	d039      	beq.n	80010a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <HAL_DMA_Init+0x15c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d11a      	bne.n	8001070 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_DMA_Init+0x168>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f003 031c 	and.w	r3, r3, #28
 8001046:	210f      	movs	r1, #15
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	4924      	ldr	r1, [pc, #144]	; (80010e0 <HAL_DMA_Init+0x168>)
 8001050:	4013      	ands	r3, r2
 8001052:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_DMA_Init+0x168>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f003 031c 	and.w	r3, r3, #28
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	491d      	ldr	r1, [pc, #116]	; (80010e0 <HAL_DMA_Init+0x168>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
 800106e:	e019      	b.n	80010a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_DMA_Init+0x16c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001078:	f003 031c 	and.w	r3, r3, #28
 800107c:	210f      	movs	r1, #15
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	4917      	ldr	r1, [pc, #92]	; (80010e4 <HAL_DMA_Init+0x16c>)
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_DMA_Init+0x16c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6859      	ldr	r1, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f003 031c 	and.w	r3, r3, #28
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	4911      	ldr	r1, [pc, #68]	; (80010e4 <HAL_DMA_Init+0x16c>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40020407 	.word	0x40020407
 80010cc:	bffdfff8 	.word	0xbffdfff8
 80010d0:	cccccccd 	.word	0xcccccccd
 80010d4:	40020000 	.word	0x40020000
 80010d8:	bffdfbf8 	.word	0xbffdfbf8
 80010dc:	40020400 	.word	0x40020400
 80010e0:	400200a8 	.word	0x400200a8
 80010e4:	400204a8 	.word	0x400204a8

080010e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	f003 031c 	and.w	r3, r3, #28
 8001108:	2204      	movs	r2, #4
 800110a:	409a      	lsls	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d026      	beq.n	8001162 <HAL_DMA_IRQHandler+0x7a>
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d021      	beq.n	8001162 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	2b00      	cmp	r3, #0
 800112a:	d107      	bne.n	800113c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0204 	bic.w	r2, r2, #4
 800113a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f003 021c 	and.w	r2, r3, #28
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	2104      	movs	r1, #4
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	2b00      	cmp	r3, #0
 8001156:	d071      	beq.n	800123c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001160:	e06c      	b.n	800123c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 031c 	and.w	r3, r3, #28
 800116a:	2202      	movs	r2, #2
 800116c:	409a      	lsls	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d02e      	beq.n	80011d4 <HAL_DMA_IRQHandler+0xec>
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d029      	beq.n	80011d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10b      	bne.n	80011a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 020a 	bic.w	r2, r2, #10
 800119c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f003 021c 	and.w	r2, r3, #28
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2102      	movs	r1, #2
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d038      	beq.n	800123c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011d2:	e033      	b.n	800123c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f003 031c 	and.w	r3, r3, #28
 80011dc:	2208      	movs	r2, #8
 80011de:	409a      	lsls	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d02a      	beq.n	800123e <HAL_DMA_IRQHandler+0x156>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d025      	beq.n	800123e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 020e 	bic.w	r2, r2, #14
 8001200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 021c 	and.w	r2, r3, #28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800123c:	bf00      	nop
 800123e:	bf00      	nop
}
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e148      	b.n	80014ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 813a 	beq.w	80014e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d005      	beq.n	8001288 <HAL_GPIO_Init+0x40>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d130      	bne.n	80012ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012be:	2201      	movs	r2, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 0201 	and.w	r2, r3, #1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d017      	beq.n	8001326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d123      	bne.n	800137a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0203 	and.w	r2, r3, #3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8094 	beq.w	80014e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013bc:	4b52      	ldr	r3, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x2c0>)
 80013be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c0:	4a51      	ldr	r2, [pc, #324]	; (8001508 <HAL_GPIO_Init+0x2c0>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6613      	str	r3, [r2, #96]	; 0x60
 80013c8:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <HAL_GPIO_Init+0x2c0>)
 80013ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d4:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_GPIO_Init+0x2c4>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013fe:	d00d      	beq.n	800141c <HAL_GPIO_Init+0x1d4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a43      	ldr	r2, [pc, #268]	; (8001510 <HAL_GPIO_Init+0x2c8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0x1d0>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a42      	ldr	r2, [pc, #264]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d101      	bne.n	8001414 <HAL_GPIO_Init+0x1cc>
 8001410:	2302      	movs	r3, #2
 8001412:	e004      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 8001414:	2307      	movs	r3, #7
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 800141c:	2300      	movs	r3, #0
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4093      	lsls	r3, r2
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142e:	4937      	ldr	r1, [pc, #220]	; (800150c <HAL_GPIO_Init+0x2c4>)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001460:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800148a:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b4:	4a18      	ldr	r2, [pc, #96]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f47f aeaf 	bne.w	8001258 <HAL_GPIO_Init+0x10>
  }
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000
 8001510:	48000400 	.word	0x48000400
 8001514:	48000800 	.word	0x48000800
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001538:	e002      	b.n	8001540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000

0800156c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_PWREx_GetVoltageRange+0x18>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40007000 	.word	0x40007000

08001588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001596:	d130      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d038      	beq.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2232      	movs	r2, #50	; 0x32
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015cc:	e002      	b.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e0:	d102      	bne.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f2      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f4:	d110      	bne.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e00f      	b.n	800161a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001606:	d007      	beq.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000
 800162c:	20000000 	.word	0x20000000
 8001630:	431bde83 	.word	0x431bde83

08001634 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f000 bc02 	b.w	8001e4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001648:	4b96      	ldr	r3, [pc, #600]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001652:	4b94      	ldr	r3, [pc, #592]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80e4 	beq.w	8001832 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <HAL_RCC_OscConfig+0x4c>
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	f040 808b 	bne.w	800178e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b01      	cmp	r3, #1
 800167c:	f040 8087 	bne.w	800178e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x64>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e3d9      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_RCC_OscConfig+0x7e>
 80016a8:	4b7e      	ldr	r3, [pc, #504]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b0:	e005      	b.n	80016be <HAL_RCC_OscConfig+0x8a>
 80016b2:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016be:	4293      	cmp	r3, r2
 80016c0:	d223      	bcs.n	800170a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fd8c 	bl	80021e4 <RCC_SetFlashLatencyFromMSIRange>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e3ba      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a72      	ldr	r2, [pc, #456]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	496d      	ldr	r1, [pc, #436]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f4:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	4968      	ldr	r1, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
 8001708:	e025      	b.n	8001756 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170a:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4960      	ldr	r1, [pc, #384]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001728:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	495b      	ldr	r1, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fd4c 	bl	80021e4 <RCC_SetFlashLatencyFromMSIRange>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e37a      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001756:	f000 fc81 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800175a:	4602      	mov	r2, r0
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4950      	ldr	r1, [pc, #320]	; (80018a8 <HAL_RCC_OscConfig+0x274>)
 8001768:	5ccb      	ldrb	r3, [r1, r3]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	fa22 f303 	lsr.w	r3, r2, r3
 8001772:	4a4e      	ldr	r2, [pc, #312]	; (80018ac <HAL_RCC_OscConfig+0x278>)
 8001774:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001776:	4b4e      	ldr	r3, [pc, #312]	; (80018b0 <HAL_RCC_OscConfig+0x27c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa8e 	bl	8000c9c <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d052      	beq.n	8001830 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	e35e      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d032      	beq.n	80017fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001796:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a2:	f7ff facb 	bl	8000d3c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017aa:	f7ff fac7 	bl	8000d3c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e347      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a35      	ldr	r2, [pc, #212]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4930      	ldr	r1, [pc, #192]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	492b      	ldr	r1, [pc, #172]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
 80017fa:	e01a      	b.n	8001832 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001808:	f7ff fa98 	bl	8000d3c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001810:	f7ff fa94 	bl	8000d3c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e314      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1dc>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d073      	beq.n	8001926 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x21c>
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d10e      	bne.n	8001868 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d10b      	bne.n	8001868 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d063      	beq.n	8001924 <HAL_RCC_OscConfig+0x2f0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d15f      	bne.n	8001924 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e2f1      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x24c>
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e025      	b.n	80018cc <HAL_RCC_OscConfig+0x298>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001888:	d114      	bne.n	80018b4 <HAL_RCC_OscConfig+0x280>
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a02      	ldr	r2, [pc, #8]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e013      	b.n	80018cc <HAL_RCC_OscConfig+0x298>
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08004354 	.word	0x08004354
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000004 	.word	0x20000004
 80018b4:	4ba0      	ldr	r3, [pc, #640]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a9f      	ldr	r2, [pc, #636]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b9d      	ldr	r3, [pc, #628]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a9c      	ldr	r2, [pc, #624]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa32 	bl	8000d3c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fa2e 	bl	8000d3c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e2ae      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ee:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x2a8>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fa1e 	bl	8000d3c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fa1a 	bl	8000d3c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e29a      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x2d0>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d060      	beq.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d005      	beq.n	8001944 <HAL_RCC_OscConfig+0x310>
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d119      	bne.n	8001972 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d116      	bne.n	8001972 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001944:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x328>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e277      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	4973      	ldr	r1, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	e040      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d023      	beq.n	80019c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197a:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f9d9 	bl	8000d3c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff f9d5 	bl	8000d3c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e255      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a0:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	495f      	ldr	r1, [pc, #380]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
 80019c0:	e018      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f9b5 	bl	8000d3c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff f9b1 	bl	8000d3c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e231      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f990 	bl	8000d3c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff f98c 	bl	8000d3c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e20c      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ef      	beq.n	8001a20 <HAL_RCC_OscConfig+0x3ec>
 8001a40:	e01b      	b.n	8001a7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a48:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff f973 	bl	8000d3c <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f96f 	bl	8000d3c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1ef      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ef      	bne.n	8001a5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80a6 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10d      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d118      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001acc:	f7ff f936 	bl	8000d3c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad4:	f7ff f932 	bl	8000d3c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1b2      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x508>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d108      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4d8>
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0a:	e029      	b.n	8001b60 <HAL_RCC_OscConfig+0x52c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d115      	bne.n	8001b40 <HAL_RCC_OscConfig+0x50c>
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x52c>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	4b9a      	ldr	r3, [pc, #616]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	4a99      	ldr	r2, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b50:	4b96      	ldr	r3, [pc, #600]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a95      	ldr	r2, [pc, #596]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d016      	beq.n	8001b96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f8e8 	bl	8000d3c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f8e4 	bl	8000d3c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e162      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ed      	beq.n	8001b70 <HAL_RCC_OscConfig+0x53c>
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff f8d1 	bl	8000d3c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f8cd 	bl	8000d3c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e14b      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	4b7d      	ldr	r3, [pc, #500]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ed      	bne.n	8001b9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001be8:	4b70      	ldr	r3, [pc, #448]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bee:	4a6f      	ldr	r2, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f8a0 	bl	8000d3c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c00:	f7ff f89c 	bl	8000d3c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e11c      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ef      	beq.n	8001c00 <HAL_RCC_OscConfig+0x5cc>
 8001c20:	e01b      	b.n	8001c5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c28:	4a60      	ldr	r2, [pc, #384]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7ff f883 	bl	8000d3c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3a:	f7ff f87f 	bl	8000d3c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0ff      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ef      	bne.n	8001c3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80f3 	beq.w	8001e4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	f040 80c9 	bne.w	8001e00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c6e:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0203 	and.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d12c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d123      	bne.n	8001cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d11b      	bne.n	8001cdc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d113      	bne.n	8001cdc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d109      	bne.n	8001cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d06b      	beq.n	8001db4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d062      	beq.n	8001da8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0ac      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfe:	f7ff f81d 	bl	8000d3c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff f819 	bl	8000d3c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e099      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_RCC_OscConfig+0x77c>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d3e:	0212      	lsls	r2, r2, #8
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d46:	0852      	lsrs	r2, r2, #1
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0552      	lsls	r2, r2, #21
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d52:	0852      	lsrs	r2, r2, #1
 8001d54:	3a01      	subs	r2, #1
 8001d56:	0652      	lsls	r2, r2, #25
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d5e:	06d2      	lsls	r2, r2, #27
 8001d60:	430a      	orrs	r2, r1
 8001d62:	4912      	ldr	r1, [pc, #72]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d80:	f7fe ffdc 	bl	8000d3c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe ffd8 	bl	8000d3c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e058      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_OscConfig+0x778>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da6:	e050      	b.n	8001e4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e04f      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d144      	bne.n	8001e4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dd8:	f7fe ffb0 	bl	8000d3c <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe ffac 	bl	8000d3c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e02c      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x7ac>
 8001dfe:	e024      	b.n	8001e4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d01f      	beq.n	8001e46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe ff93 	bl	8000d3c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe ff8f 	bl	8000d3c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4905      	ldr	r1, [pc, #20]	; (8001e54 <HAL_RCC_OscConfig+0x820>)
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x824>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
 8001e44:	e001      	b.n	8001e4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	feeefffc 	.word	0xfeeefffc

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0e7      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b75      	ldr	r3, [pc, #468]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b72      	ldr	r3, [pc, #456]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4970      	ldr	r1, [pc, #448]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0cf      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d010      	beq.n	8001ece <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d908      	bls.n	8001ece <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4960      	ldr	r1, [pc, #384]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d04c      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d121      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0a6      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d115      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e09a      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e08e      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e086      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f32:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f023 0203 	bic.w	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4943      	ldr	r1, [pc, #268]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f44:	f7fe fefa 	bl	8000d3c <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7fe fef6 	bl	8000d3c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e06e      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 020c 	and.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1eb      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d010      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d208      	bcs.n	8001fa2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	492b      	ldr	r1, [pc, #172]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa2:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d210      	bcs.n	8001fd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 0207 	bic.w	r2, r3, #7
 8001fb8:	4923      	ldr	r1, [pc, #140]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e036      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4918      	ldr	r1, [pc, #96]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4910      	ldr	r1, [pc, #64]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002010:	f000 f824 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	490b      	ldr	r1, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x1f4>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1f8>)
 800202e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1fc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fe31 	bl	8000c9c <HAL_InitTick>
 800203a:	4603      	mov	r3, r0
 800203c:	72fb      	strb	r3, [r7, #11]

  return status;
 800203e:	7afb      	ldrb	r3, [r7, #11]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08004354 	.word	0x08004354
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x34>
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d121      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d11e      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002090:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d107      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e005      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020b8:	4a2b      	ldr	r2, [pc, #172]	; (8002168 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d102      	bne.n	80020da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_RCC_GetSysClockFreq+0x110>)
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	e004      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_RCC_GetSysClockFreq+0x114>)
 80020e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d134      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0xa6>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d003      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0xac>
 8002100:	e005      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_RCC_GetSysClockFreq+0x110>)
 8002104:	617b      	str	r3, [r7, #20]
      break;
 8002106:	e005      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_GetSysClockFreq+0x114>)
 800210a:	617b      	str	r3, [r7, #20]
      break;
 800210c:	e002      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	617b      	str	r3, [r7, #20]
      break;
 8002112:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	3301      	adds	r3, #1
 8002120:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	fb03 f202 	mul.w	r2, r3, r2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	0e5b      	lsrs	r3, r3, #25
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	3301      	adds	r3, #1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002154:	69bb      	ldr	r3, [r7, #24]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	0800436c 	.word	0x0800436c
 800216c:	00f42400 	.word	0x00f42400
 8002170:	007a1200 	.word	0x007a1200

08002174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_RCC_GetHCLKFreq+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002190:	f7ff fff0 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08004364 	.word	0x08004364

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021bc:	f7ff ffda 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0adb      	lsrs	r3, r3, #11
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4904      	ldr	r1, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08004364 	.word	0x08004364

080021e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021fc:	f7ff f9b6 	bl	800156c <HAL_PWREx_GetVoltageRange>
 8002200:	6178      	str	r0, [r7, #20]
 8002202:	e014      	b.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4a24      	ldr	r2, [pc, #144]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	6593      	str	r3, [r2, #88]	; 0x58
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800221c:	f7ff f9a6 	bl	800156c <HAL_PWREx_GetVoltageRange>
 8002220:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002234:	d10b      	bne.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d919      	bls.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2ba0      	cmp	r3, #160	; 0xa0
 8002240:	d902      	bls.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002242:	2302      	movs	r3, #2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e013      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e010      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d902      	bls.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002254:	2303      	movs	r3, #3
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e00a      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d102      	bne.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002260:	2302      	movs	r3, #2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e004      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b70      	cmp	r3, #112	; 0x70
 800226a:	d101      	bne.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 0207 	bic.w	r2, r3, #7
 8002278:	4909      	ldr	r1, [pc, #36]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	40022000 	.word	0x40022000

080022a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022ac:	2300      	movs	r3, #0
 80022ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b0:	2300      	movs	r3, #0
 80022b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d031      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022c8:	d01a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ce:	d814      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022d8:	d10f      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e6:	e00c      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f9de 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f8:	e003      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	74fb      	strb	r3, [r7, #19]
      break;
 80022fe:	e000      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002308:	4b51      	ldr	r3, [pc, #324]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	494e      	ldr	r1, [pc, #312]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800231e:	e001      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 809e 	beq.w	800246e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002336:	4b46      	ldr	r3, [pc, #280]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002346:	2300      	movs	r3, #0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00d      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b40      	ldr	r3, [pc, #256]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a3f      	ldr	r2, [pc, #252]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002368:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a39      	ldr	r2, [pc, #228]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002374:	f7fe fce2 	bl	8000d3c <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800237a:	e009      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237c:	f7fe fcde 	bl	8000d3c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d902      	bls.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	74fb      	strb	r3, [r7, #19]
        break;
 800238e:	e005      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ef      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d15a      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01e      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d019      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023ea:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe fc9e 	bl	8000d3c <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	e00b      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe fc9a 	bl	8000d3c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d902      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	74fb      	strb	r3, [r7, #19]
            break;
 800241a:	e006      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ec      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243e:	4904      	ldr	r1, [pc, #16]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002446:	e009      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
 800244c:	e006      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245c:	7c7b      	ldrb	r3, [r7, #17]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b8a      	ldr	r3, [pc, #552]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	4a89      	ldr	r2, [pc, #548]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800247a:	4b84      	ldr	r3, [pc, #528]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 0203 	bic.w	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4980      	ldr	r1, [pc, #512]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800249c:	4b7b      	ldr	r3, [pc, #492]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 020c 	bic.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	4978      	ldr	r1, [pc, #480]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024be:	4b73      	ldr	r3, [pc, #460]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	496f      	ldr	r1, [pc, #444]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	4967      	ldr	r1, [pc, #412]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	495e      	ldr	r1, [pc, #376]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	4956      	ldr	r1, [pc, #344]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002546:	4b51      	ldr	r3, [pc, #324]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d028      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002568:	4b48      	ldr	r3, [pc, #288]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4945      	ldr	r1, [pc, #276]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002586:	d106      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002588:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a3f      	ldr	r2, [pc, #252]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002592:	60d3      	str	r3, [r2, #12]
 8002594:	e011      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800259e:	d10c      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3304      	adds	r3, #4
 80025a4:	2101      	movs	r1, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f882 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d028      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	492d      	ldr	r1, [pc, #180]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e4:	d106      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e6:	4b29      	ldr	r3, [pc, #164]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f0:	60d3      	str	r3, [r2, #12]
 80025f2:	e011      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f853 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01c      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002632:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002642:	d10c      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	2102      	movs	r1, #2
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f830 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	4904      	ldr	r1, [pc, #16]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002680:	7cbb      	ldrb	r3, [r7, #18]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000

080026b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026be:	4b74      	ldr	r3, [pc, #464]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ca:	4b71      	ldr	r3, [pc, #452]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10d      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
       ||
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026e2:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
       ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d047      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e044      	b.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d018      	beq.n	8002736 <RCCEx_PLLSAI1_Config+0x86>
 8002704:	2b03      	cmp	r3, #3
 8002706:	d825      	bhi.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
 8002708:	2b01      	cmp	r3, #1
 800270a:	d002      	beq.n	8002712 <RCCEx_PLLSAI1_Config+0x62>
 800270c:	2b02      	cmp	r3, #2
 800270e:	d009      	beq.n	8002724 <RCCEx_PLLSAI1_Config+0x74>
 8002710:	e020      	b.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11d      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002722:	e01a      	b.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002724:	4b5a      	ldr	r3, [pc, #360]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002734:	e013      	b.n	800275e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002752:	e006      	b.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e004      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002762:	bf00      	nop
    }

    if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	430b      	orrs	r3, r1
 8002780:	4943      	ldr	r1, [pc, #268]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d17c      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fad0 	bl	8000d3c <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fe facc 	bl	8000d3c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
        break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ef      	bne.n	80027a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d15f      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d110      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6892      	ldr	r2, [r2, #8]
 80027dc:	0211      	lsls	r1, r2, #8
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	06d2      	lsls	r2, r2, #27
 80027e4:	430a      	orrs	r2, r1
 80027e6:	492a      	ldr	r1, [pc, #168]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	610b      	str	r3, [r1, #16]
 80027ec:	e027      	b.n	800283e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d112      	bne.n	800281a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	0211      	lsls	r1, r2, #8
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6912      	ldr	r2, [r2, #16]
 800280a:	0852      	lsrs	r2, r2, #1
 800280c:	3a01      	subs	r2, #1
 800280e:	0552      	lsls	r2, r2, #21
 8002810:	430a      	orrs	r2, r1
 8002812:	491f      	ldr	r1, [pc, #124]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	610b      	str	r3, [r1, #16]
 8002818:	e011      	b.n	800283e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002822:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6892      	ldr	r2, [r2, #8]
 800282a:	0211      	lsls	r1, r2, #8
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6952      	ldr	r2, [r2, #20]
 8002830:	0852      	lsrs	r2, r2, #1
 8002832:	3a01      	subs	r2, #1
 8002834:	0652      	lsls	r2, r2, #25
 8002836:	430a      	orrs	r2, r1
 8002838:	4915      	ldr	r1, [pc, #84]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283a:	4313      	orrs	r3, r2
 800283c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002848:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fe fa77 	bl	8000d3c <HAL_GetTick>
 800284e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002850:	e009      	b.n	8002866 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002852:	f7fe fa73 	bl	8000d3c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	73fb      	strb	r3, [r7, #15]
          break;
 8002864:	e005      	b.n	8002872 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ef      	beq.n	8002852 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e095      	b.n	80029d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b6:	d009      	beq.n	80028cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
 80028be:	e005      	b.n	80028cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f820 	bl	800092c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002902:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800290c:	d902      	bls.n	8002914 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e002      	b.n	800291a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002918:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002922:	d007      	beq.n	8002934 <HAL_SPI_Init+0xa0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	ea42 0103 	orr.w	r1, r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	f003 0204 	and.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029b0:	ea42 0103 	orr.w	r1, r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e049      	b.n	8002a80 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7fd ffd5 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f000 fb53 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e049      	b.n	8002b2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f841 	bl	8002b36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f000 fafc 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_TIM_PWM_Start+0x24>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e03c      	b.n	8002bea <HAL_TIM_PWM_Start+0x9e>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d109      	bne.n	8002b8a <HAL_TIM_PWM_Start+0x3e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e02f      	b.n	8002bea <HAL_TIM_PWM_Start+0x9e>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d109      	bne.n	8002ba4 <HAL_TIM_PWM_Start+0x58>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e022      	b.n	8002bea <HAL_TIM_PWM_Start+0x9e>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d109      	bne.n	8002bbe <HAL_TIM_PWM_Start+0x72>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e015      	b.n	8002bea <HAL_TIM_PWM_Start+0x9e>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d109      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0x8c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e008      	b.n	8002bea <HAL_TIM_PWM_Start+0x9e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07e      	b.n	8002cf0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0xb6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c00:	e023      	b.n	8002c4a <HAL_TIM_PWM_Start+0xfe>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Start+0xc6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c10:	e01b      	b.n	8002c4a <HAL_TIM_PWM_Start+0xfe>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Start+0xd6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c20:	e013      	b.n	8002c4a <HAL_TIM_PWM_Start+0xfe>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xe6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c30:	e00b      	b.n	8002c4a <HAL_TIM_PWM_Start+0xfe>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xf6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c40:	e003      	b.n	8002c4a <HAL_TIM_PWM_Start+0xfe>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	6839      	ldr	r1, [r7, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fdb2 	bl	80037bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <HAL_TIM_PWM_Start+0x1ac>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x12a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <HAL_TIM_PWM_Start+0x1b0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x12a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_TIM_PWM_Start+0x1b4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_TIM_PWM_Start+0x12e>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_TIM_PWM_Start+0x130>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIM_PWM_Start+0x1ac>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_TIM_PWM_Start+0x162>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca2:	d004      	beq.n	8002cae <HAL_TIM_PWM_Start+0x162>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_TIM_PWM_Start+0x1b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d115      	bne.n	8002cda <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_TIM_PWM_Start+0x1b8>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d015      	beq.n	8002cec <HAL_TIM_PWM_Start+0x1a0>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d011      	beq.n	8002cec <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd8:	e008      	b.n	8002cec <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e000      	b.n	8002cee <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40014400 	.word	0x40014400
 8002d04:	00010007 	.word	0x00010007

08002d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0ff      	b.n	8002f26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b14      	cmp	r3, #20
 8002d32:	f200 80f0 	bhi.w	8002f16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d91 	.word	0x08002d91
 8002d40:	08002f17 	.word	0x08002f17
 8002d44:	08002f17 	.word	0x08002f17
 8002d48:	08002f17 	.word	0x08002f17
 8002d4c:	08002dd1 	.word	0x08002dd1
 8002d50:	08002f17 	.word	0x08002f17
 8002d54:	08002f17 	.word	0x08002f17
 8002d58:	08002f17 	.word	0x08002f17
 8002d5c:	08002e13 	.word	0x08002e13
 8002d60:	08002f17 	.word	0x08002f17
 8002d64:	08002f17 	.word	0x08002f17
 8002d68:	08002f17 	.word	0x08002f17
 8002d6c:	08002e53 	.word	0x08002e53
 8002d70:	08002f17 	.word	0x08002f17
 8002d74:	08002f17 	.word	0x08002f17
 8002d78:	08002f17 	.word	0x08002f17
 8002d7c:	08002e95 	.word	0x08002e95
 8002d80:	08002f17 	.word	0x08002f17
 8002d84:	08002f17 	.word	0x08002f17
 8002d88:	08002f17 	.word	0x08002f17
 8002d8c:	08002ed5 	.word	0x08002ed5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f9f8 	bl	800318c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0208 	orr.w	r2, r2, #8
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	619a      	str	r2, [r3, #24]
      break;
 8002dce:	e0a5      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fa54 	bl	8003284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6999      	ldr	r1, [r3, #24]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]
      break;
 8002e10:	e084      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 faad 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0208 	orr.w	r2, r2, #8
 8002e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0204 	bic.w	r2, r2, #4
 8002e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	61da      	str	r2, [r3, #28]
      break;
 8002e50:	e064      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fb05 	bl	8003468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69d9      	ldr	r1, [r3, #28]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	021a      	lsls	r2, r3, #8
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	61da      	str	r2, [r3, #28]
      break;
 8002e92:	e043      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fb42 	bl	8003524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0208 	orr.w	r2, r2, #8
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0204 	bic.w	r2, r2, #4
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ed2:	e023      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fb7a 	bl	80035d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	021a      	lsls	r2, r3, #8
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f14:	e002      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
      break;
 8002f1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIM_ConfigClockSource+0x1c>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0b6      	b.n	80030ba <HAL_TIM_ConfigClockSource+0x18a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f88:	d03e      	beq.n	8003008 <HAL_TIM_ConfigClockSource+0xd8>
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8e:	f200 8087 	bhi.w	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	f000 8086 	beq.w	80030a6 <HAL_TIM_ConfigClockSource+0x176>
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d87f      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002fa0:	2b70      	cmp	r3, #112	; 0x70
 8002fa2:	d01a      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xaa>
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d87b      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002fa8:	2b60      	cmp	r3, #96	; 0x60
 8002faa:	d050      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x11e>
 8002fac:	2b60      	cmp	r3, #96	; 0x60
 8002fae:	d877      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d03c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xfe>
 8002fb4:	2b50      	cmp	r3, #80	; 0x50
 8002fb6:	d873      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d058      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x13e>
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d86f      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002fc0:	2b30      	cmp	r3, #48	; 0x30
 8002fc2:	d064      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15e>
 8002fc4:	2b30      	cmp	r3, #48	; 0x30
 8002fc6:	d86b      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d060      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15e>
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d867      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15e>
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d05a      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15e>
 8002fd8:	e062      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fea:	f000 fbc7 	bl	800377c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	609a      	str	r2, [r3, #8]
      break;
 8003006:	e04f      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003018:	f000 fbb0 	bl	800377c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800302a:	609a      	str	r2, [r3, #8]
      break;
 800302c:	e03c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303a:	461a      	mov	r2, r3
 800303c:	f000 fb24 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2150      	movs	r1, #80	; 0x50
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fb7d 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 800304c:	e02c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800305a:	461a      	mov	r2, r3
 800305c:	f000 fb43 	bl	80036e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2160      	movs	r1, #96	; 0x60
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fb6d 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 800306c:	e01c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307a:	461a      	mov	r2, r3
 800307c:	f000 fb04 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fb5d 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 800308c:	e00c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 fb54 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 800309e:	e003      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	e000      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x20>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d108      	bne.n	80030f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a21      	ldr	r2, [pc, #132]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <TIM_Base_SetConfig+0x52>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d007      	beq.n	8003116 <TIM_Base_SetConfig+0x52>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_Base_SetConfig+0x52>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <TIM_Base_SetConfig+0xc4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0xa0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0xa0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <TIM_Base_SetConfig+0xc4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400

0800318c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f023 0201 	bic.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 0302 	bic.w	r3, r3, #2
 80031d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a24      	ldr	r2, [pc, #144]	; (8003278 <TIM_OC1_SetConfig+0xec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <TIM_OC1_SetConfig+0x70>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a23      	ldr	r2, [pc, #140]	; (800327c <TIM_OC1_SetConfig+0xf0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_OC1_SetConfig+0x70>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a22      	ldr	r2, [pc, #136]	; (8003280 <TIM_OC1_SetConfig+0xf4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10c      	bne.n	8003216 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0308 	bic.w	r3, r3, #8
 8003202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a17      	ldr	r2, [pc, #92]	; (8003278 <TIM_OC1_SetConfig+0xec>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_OC1_SetConfig+0xa2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a16      	ldr	r2, [pc, #88]	; (800327c <TIM_OC1_SetConfig+0xf0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC1_SetConfig+0xa2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <TIM_OC1_SetConfig+0xf4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d111      	bne.n	8003252 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400

08003284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 0210 	bic.w	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0320 	bic.w	r3, r3, #32
 80032d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <TIM_OC2_SetConfig+0xe8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10d      	bne.n	8003304 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <TIM_OC2_SetConfig+0xe8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <TIM_OC2_SetConfig+0x98>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <TIM_OC2_SetConfig+0xec>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_OC2_SetConfig+0x98>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a17      	ldr	r2, [pc, #92]	; (8003374 <TIM_OC2_SetConfig+0xf0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d113      	bne.n	8003344 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800332a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	621a      	str	r2, [r3, #32]
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <TIM_OC3_SetConfig+0xe4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10d      	bne.n	80033f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a18      	ldr	r2, [pc, #96]	; (800345c <TIM_OC3_SetConfig+0xe4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_OC3_SetConfig+0x96>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <TIM_OC3_SetConfig+0xe8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_OC3_SetConfig+0x96>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <TIM_OC3_SetConfig+0xec>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d113      	bne.n	8003436 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	621a      	str	r2, [r3, #32]
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40014000 	.word	0x40014000
 8003464:	40014400 	.word	0x40014400

08003468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	031b      	lsls	r3, r3, #12
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a14      	ldr	r2, [pc, #80]	; (8003518 <TIM_OC4_SetConfig+0xb0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <TIM_OC4_SetConfig+0x74>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a13      	ldr	r2, [pc, #76]	; (800351c <TIM_OC4_SetConfig+0xb4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_OC4_SetConfig+0x74>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <TIM_OC4_SetConfig+0xb8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d109      	bne.n	80034f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400

08003524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <TIM_OC5_SetConfig+0xa4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_OC5_SetConfig+0x6a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <TIM_OC5_SetConfig+0xa8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_OC5_SetConfig+0x6a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a11      	ldr	r2, [pc, #68]	; (80035d0 <TIM_OC5_SetConfig+0xac>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d109      	bne.n	80035a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003594:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400

080035d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	051b      	lsls	r3, r3, #20
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a14      	ldr	r2, [pc, #80]	; (800367c <TIM_OC6_SetConfig+0xa8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d007      	beq.n	8003640 <TIM_OC6_SetConfig+0x6c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <TIM_OC6_SetConfig+0xac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d003      	beq.n	8003640 <TIM_OC6_SetConfig+0x6c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <TIM_OC6_SetConfig+0xb0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	029b      	lsls	r3, r3, #10
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400

08003688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 030a 	bic.w	r3, r3, #10
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0210 	bic.w	r2, r3, #16
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	f043 0307 	orr.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	431a      	orrs	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2201      	movs	r2, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	43db      	mvns	r3, r3
 80037de:	401a      	ands	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800381c:	2302      	movs	r3, #2
 800381e:	e04f      	b.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a21      	ldr	r2, [pc, #132]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d108      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003850:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d004      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10c      	bne.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40014000 	.word	0x40014000

080038d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e060      	b.n	80039b2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d115      	bne.n	80039a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	051b      	lsls	r3, r3, #20
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40012c00 	.word	0x40012c00

080039c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e040      	b.n	8003a58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd f866 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa54 	bl	8003eb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f825 	bl	8003a60 <UART_SetConfig>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e01b      	b.n	8003a58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fad3 	bl	8003ffc <UART_CheckIdleState>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a64:	b08a      	sub	sp, #40	; 0x28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4bb4      	ldr	r3, [pc, #720]	; (8003d60 <UART_SetConfig+0x300>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4aa9      	ldr	r2, [pc, #676]	; (8003d64 <UART_SetConfig+0x304>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4aa0      	ldr	r2, [pc, #640]	; (8003d68 <UART_SetConfig+0x308>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d126      	bne.n	8003b38 <UART_SetConfig+0xd8>
 8003aea:	4ba0      	ldr	r3, [pc, #640]	; (8003d6c <UART_SetConfig+0x30c>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d81b      	bhi.n	8003b30 <UART_SetConfig+0xd0>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0xa0>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b11 	.word	0x08003b11
 8003b04:	08003b21 	.word	0x08003b21
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b29 	.word	0x08003b29
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b16:	e080      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e07c      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003b20:	2304      	movs	r3, #4
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b26:	e078      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2e:	e074      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	e070      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a8c      	ldr	r2, [pc, #560]	; (8003d70 <UART_SetConfig+0x310>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d138      	bne.n	8003bb4 <UART_SetConfig+0x154>
 8003b42:	4b8a      	ldr	r3, [pc, #552]	; (8003d6c <UART_SetConfig+0x30c>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d82d      	bhi.n	8003bac <UART_SetConfig+0x14c>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <UART_SetConfig+0xf8>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b8d 	.word	0x08003b8d
 8003b5c:	08003bad 	.word	0x08003bad
 8003b60:	08003bad 	.word	0x08003bad
 8003b64:	08003bad 	.word	0x08003bad
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003bad 	.word	0x08003bad
 8003b70:	08003bad 	.word	0x08003bad
 8003b74:	08003bad 	.word	0x08003bad
 8003b78:	08003b95 	.word	0x08003b95
 8003b7c:	08003bad 	.word	0x08003bad
 8003b80:	08003bad 	.word	0x08003bad
 8003b84:	08003bad 	.word	0x08003bad
 8003b88:	08003ba5 	.word	0x08003ba5
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e042      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003b94:	2302      	movs	r3, #2
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e03e      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e03a      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e036      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003bac:	2310      	movs	r3, #16
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e032      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	; (8003d64 <UART_SetConfig+0x304>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d12a      	bne.n	8003c14 <UART_SetConfig+0x1b4>
 8003bbe:	4b6b      	ldr	r3, [pc, #428]	; (8003d6c <UART_SetConfig+0x30c>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bcc:	d01a      	beq.n	8003c04 <UART_SetConfig+0x1a4>
 8003bce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd2:	d81b      	bhi.n	8003c0c <UART_SetConfig+0x1ac>
 8003bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd8:	d00c      	beq.n	8003bf4 <UART_SetConfig+0x194>
 8003bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bde:	d815      	bhi.n	8003c0c <UART_SetConfig+0x1ac>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <UART_SetConfig+0x18c>
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be8:	d008      	beq.n	8003bfc <UART_SetConfig+0x19c>
 8003bea:	e00f      	b.n	8003c0c <UART_SetConfig+0x1ac>
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e012      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e00e      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e00a      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003c04:	2308      	movs	r3, #8
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e006      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e002      	b.n	8003c1a <UART_SetConfig+0x1ba>
 8003c14:	2310      	movs	r3, #16
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a51      	ldr	r2, [pc, #324]	; (8003d64 <UART_SetConfig+0x304>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d17a      	bne.n	8003d1a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d824      	bhi.n	8003c76 <UART_SetConfig+0x216>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x1d4>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c77 	.word	0x08003c77
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003c67 	.word	0x08003c67
 8003c48:	08003c77 	.word	0x08003c77
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c77 	.word	0x08003c77
 8003c54:	08003c6f 	.word	0x08003c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7fe fa98 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 8003c5c:	61f8      	str	r0, [r7, #28]
        break;
 8003c5e:	e010      	b.n	8003c82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c60:	4b44      	ldr	r3, [pc, #272]	; (8003d74 <UART_SetConfig+0x314>)
 8003c62:	61fb      	str	r3, [r7, #28]
        break;
 8003c64:	e00d      	b.n	8003c82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c66:	f7fe f9f9 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8003c6a:	61f8      	str	r0, [r7, #28]
        break;
 8003c6c:	e009      	b.n	8003c82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c72:	61fb      	str	r3, [r7, #28]
        break;
 8003c74:	e005      	b.n	8003c82 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8107 	beq.w	8003e98 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d305      	bcc.n	8003ca6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d903      	bls.n	8003cae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cac:	e0f4      	b.n	8003e98 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	461c      	mov	r4, r3
 8003cb4:	4615      	mov	r5, r2
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	022b      	lsls	r3, r5, #8
 8003cc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cc4:	0222      	lsls	r2, r4, #8
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	6849      	ldr	r1, [r1, #4]
 8003cca:	0849      	lsrs	r1, r1, #1
 8003ccc:	2000      	movs	r0, #0
 8003cce:	4688      	mov	r8, r1
 8003cd0:	4681      	mov	r9, r0
 8003cd2:	eb12 0a08 	adds.w	sl, r2, r8
 8003cd6:	eb43 0b09 	adc.w	fp, r3, r9
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce8:	4650      	mov	r0, sl
 8003cea:	4659      	mov	r1, fp
 8003cec:	f7fc fa6e 	bl	80001cc <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfe:	d308      	bcc.n	8003d12 <UART_SetConfig+0x2b2>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d06:	d204      	bcs.n	8003d12 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	e0c2      	b.n	8003e98 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d18:	e0be      	b.n	8003e98 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	d16a      	bne.n	8003dfa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d834      	bhi.n	8003d96 <UART_SetConfig+0x336>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x2d4>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d81 	.word	0x08003d81
 8003d40:	08003d97 	.word	0x08003d97
 8003d44:	08003d87 	.word	0x08003d87
 8003d48:	08003d97 	.word	0x08003d97
 8003d4c:	08003d97 	.word	0x08003d97
 8003d50:	08003d97 	.word	0x08003d97
 8003d54:	08003d8f 	.word	0x08003d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7fe fa18 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 8003d5c:	61f8      	str	r0, [r7, #28]
        break;
 8003d5e:	e020      	b.n	8003da2 <UART_SetConfig+0x342>
 8003d60:	efff69f3 	.word	0xefff69f3
 8003d64:	40008000 	.word	0x40008000
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40004400 	.word	0x40004400
 8003d74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7fe fa1e 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	61f8      	str	r0, [r7, #28]
        break;
 8003d7e:	e010      	b.n	8003da2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d80:	4b4c      	ldr	r3, [pc, #304]	; (8003eb4 <UART_SetConfig+0x454>)
 8003d82:	61fb      	str	r3, [r7, #28]
        break;
 8003d84:	e00d      	b.n	8003da2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d86:	f7fe f969 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8003d8a:	61f8      	str	r0, [r7, #28]
        break;
 8003d8c:	e009      	b.n	8003da2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d92:	61fb      	str	r3, [r7, #28]
        break;
 8003d94:	e005      	b.n	8003da2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d077      	beq.n	8003e98 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005a      	lsls	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	d916      	bls.n	8003df2 <UART_SetConfig+0x392>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dca:	d212      	bcs.n	8003df2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f023 030f 	bic.w	r3, r3, #15
 8003dd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	8afb      	ldrh	r3, [r7, #22]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	8afa      	ldrh	r2, [r7, #22]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e052      	b.n	8003e98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003df8:	e04e      	b.n	8003e98 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d827      	bhi.n	8003e52 <UART_SetConfig+0x3f2>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <UART_SetConfig+0x3a8>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e53 	.word	0x08003e53
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003e53 	.word	0x08003e53
 8003e24:	08003e53 	.word	0x08003e53
 8003e28:	08003e4b 	.word	0x08003e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7fe f9ae 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 8003e30:	61f8      	str	r0, [r7, #28]
        break;
 8003e32:	e014      	b.n	8003e5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7fe f9c0 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8003e38:	61f8      	str	r0, [r7, #28]
        break;
 8003e3a:	e010      	b.n	8003e5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <UART_SetConfig+0x454>)
 8003e3e:	61fb      	str	r3, [r7, #28]
        break;
 8003e40:	e00d      	b.n	8003e5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e42:	f7fe f90b 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8003e46:	61f8      	str	r0, [r7, #28]
        break;
 8003e48:	e009      	b.n	8003e5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4e:	61fb      	str	r3, [r7, #28]
        break;
 8003e50:	e005      	b.n	8003e5e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e5c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d019      	beq.n	8003e98 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	085a      	lsrs	r2, r3, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	441a      	add	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	d909      	bls.n	8003e92 <UART_SetConfig+0x432>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	d205      	bcs.n	8003e92 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	e002      	b.n	8003e98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ea4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop
 8003eb4:	00f42400 	.word	0x00f42400

08003eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01a      	beq.n	8003fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb6:	d10a      	bne.n	8003fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b098      	sub	sp, #96	; 0x60
 8004000:	af02      	add	r7, sp, #8
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800400c:	f7fc fe96 	bl	8000d3c <HAL_GetTick>
 8004010:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b08      	cmp	r3, #8
 800401e:	d12e      	bne.n	800407e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004028:	2200      	movs	r2, #0
 800402a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f88c 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d021      	beq.n	800407e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404e:	653b      	str	r3, [r7, #80]	; 0x50
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004058:	647b      	str	r3, [r7, #68]	; 0x44
 800405a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800405e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e6      	bne.n	800403a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e062      	b.n	8004144 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d149      	bne.n	8004120 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800408c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f856 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d03c      	beq.n	8004120 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	623b      	str	r3, [r7, #32]
   return(result);
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
 80040c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f8:	61fa      	str	r2, [r7, #28]
 80040fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	617b      	str	r3, [r7, #20]
   return(result);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e011      	b.n	8004144 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3758      	adds	r7, #88	; 0x58
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415c:	e049      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d045      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7fc fde9 	bl	8000d3c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <UART_WaitOnFlagUntilTimeout+0x30>
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e048      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d031      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b08      	cmp	r3, #8
 800419a:	d110      	bne.n	80041be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2208      	movs	r2, #8
 80041a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f838 	bl	800421a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2208      	movs	r2, #8
 80041ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e029      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041cc:	d111      	bne.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f81e 	bl	800421a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00f      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	429a      	cmp	r2, r3
 800420e:	d0a6      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800421a:	b480      	push	{r7}
 800421c:	b095      	sub	sp, #84	; 0x54
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	643b      	str	r3, [r7, #64]	; 0x40
 8004242:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3308      	adds	r3, #8
 800425a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	61fb      	str	r3, [r7, #28]
   return(result);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	64bb      	str	r3, [r7, #72]	; 0x48
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428c:	2b01      	cmp	r3, #1
 800428e:	d118      	bne.n	80042c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	60bb      	str	r3, [r7, #8]
   return(result);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6979      	ldr	r1, [r7, #20]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	613b      	str	r3, [r7, #16]
   return(result);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e6      	bne.n	8004290 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042d6:	bf00      	nop
 80042d8:	3754      	adds	r7, #84	; 0x54
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <memset>:
 80042e2:	4402      	add	r2, r0
 80042e4:	4603      	mov	r3, r0
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d100      	bne.n	80042ec <memset+0xa>
 80042ea:	4770      	bx	lr
 80042ec:	f803 1b01 	strb.w	r1, [r3], #1
 80042f0:	e7f9      	b.n	80042e6 <memset+0x4>
	...

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4d0d      	ldr	r5, [pc, #52]	; (800432c <__libc_init_array+0x38>)
 80042f8:	4c0d      	ldr	r4, [pc, #52]	; (8004330 <__libc_init_array+0x3c>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	2600      	movs	r6, #0
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	4d0b      	ldr	r5, [pc, #44]	; (8004334 <__libc_init_array+0x40>)
 8004306:	4c0c      	ldr	r4, [pc, #48]	; (8004338 <__libc_init_array+0x44>)
 8004308:	f000 f818 	bl	800433c <_init>
 800430c:	1b64      	subs	r4, r4, r5
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	2600      	movs	r6, #0
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	080043a4 	.word	0x080043a4
 8004330:	080043a4 	.word	0x080043a4
 8004334:	080043a4 	.word	0x080043a4
 8004338:	080043a8 	.word	0x080043a8

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
